{"version":3,"file":"liars.umd.js","sources":["../src/logger.ts","../src/liars.ts"],"sourcesContent":["export interface Log {\n  log: string\n  timestamp: number\n}\n\nexport class Logger {\n  logs: Log[] = []\n  addLog(log: string) {\n    const LogWithTimestamp = { log, timestamp: Date.now() }\n    this.logs = [...this.logs, LogWithTimestamp]\n  }\n\n  addLogs(logs: string[]) {\n    this.addLog(logs.join('\\n'))\n  }\n\n  printAll() {\n    this.logs.forEach(log => {\n      console.log(`[${new Date(log.timestamp)}]`)\n      console.log(log.log)\n    })\n  }\n}\n","import { mockLobby, mockPlayers } from '../test/mocks'\nimport { Logger } from './logger'\ninterface Player {\n  id: number\n  name: string\n}\ninterface GamePlayer extends Player {\n  hand: number[]\n}\n\ninterface UserSettings {\n  numberOfStartingDice?: number\n}\ninterface Settings {\n  numberOfStartingDice: number\n}\n\ninterface Bid {\n  face: number\n  quantity: number\n}\n\ninterface PlayerBid extends Bid {\n  playerId: Player['id']\n}\n\nenum GameState {\n  'Open',\n  'In Progress',\n  'Closed'\n}\n\nexport class Liars {\n  players: GamePlayer[] = []\n  roundHistory: PlayerBid[][] = []\n  bids: PlayerBid[] = []\n  currentPlayerIndex: number = -1\n  winners: GamePlayer[] = []\n  losers: GamePlayer[] = []\n  gameState: GameState = GameState.Open\n  defaultSettings: Settings = {\n    numberOfStartingDice: 5\n  }\n  settings: Settings\n  validFaces: number[] = [1, 2, 3, 4, 5, 6]\n  logger: Logger = new Logger()\n\n  constructor(public id: number, private userSettings: UserSettings) {\n    this.settings = { ...this.defaultSettings, ...userSettings }\n  }\n\n  startGame() {\n    this.currentPlayerIndex = Math.floor(Math.random() * this.players.length)\n    this.dealDice(this.settings.numberOfStartingDice)\n    this.logRoundState()\n  }\n\n  logRoundState() {\n    let messages = [\n      `There are ${this.totalNumberOfDice} dice left in the game`,\n      ...this.players.map(player => {\n        return `${player.name} has ${player.hand.length} dice remaining`\n      }),\n      ...this.bids.map(bid => {\n        const player = this.getPlayerById(bid.playerId)\n        return `${player && player.name} bid ${bid.quantity},${bid.face}`\n      })\n    ]\n    this.logger.addLogs(messages)\n  }\n\n  get gameStateText() {\n    return Object.values(GameState)[this.gameState]\n  }\n\n  private dealDice(numberOfStartingDice: number) {\n    this.players = this.players.map(player => {\n      player.hand = this.generateHand(numberOfStartingDice)\n      return player\n    })\n  }\n\n  private generateHand(numberOfDice: number) {\n    return new Array(numberOfDice).fill(undefined).map(() => Math.floor(Math.random() * 6) + 1)\n  }\n  get allDice() {\n    return this.players.flatMap(player => player.hand)\n  }\n\n  get totalNumberOfDice() {\n    return this.allDice.length\n  }\n  getNumberOfDiceWithFace(target: number) {\n    return this.allDice.filter(die => die === target).length\n  }\n\n  private convertPlayerToGamePlayer(player: Player) {\n    return { ...player, hand: [] }\n  }\n\n  addPlayer(player: Player) {\n    this.players = [...this.players, this.convertPlayerToGamePlayer(player)]\n  }\n\n  addPlayers(players: Player[]) {\n    this.players = [...this.players, ...players.map(this.convertPlayerToGamePlayer)]\n  }\n\n  removePlayer(playerId: number) {\n    this.players = this.players.filter(player => player.id !== playerId)\n  }\n\n  getCurrentPlayer() {\n    return this.players[this.currentPlayerIndex]\n  }\n\n  setCurrentPlayer(playerId: Player['id']) {\n    const index = this.players.findIndex(player => player.id === playerId)\n    if (index < 0) {\n      throw new Error('Player not Found')\n    } else {\n      this.currentPlayerIndex = index\n    }\n  }\n\n  getCurrentBid() {\n    if (this.bids.length > 0) {\n      return this.bids[this.bids.length - 1]\n    }\n    throw new Error(`Current Bid Doesn't exist`)\n  }\n\n  convertBidToPlayerBid(bid: Bid): PlayerBid {\n    return { ...bid, playerId: this.getCurrentPlayer().id }\n  }\n\n  getPlayerById(id: Player['id']) {\n    return this.players.find(player => player.id === id)\n  }\n\n  getNextPlayer() {\n    return (this.currentPlayerIndex + 1) % this.players.length\n  }\n\n  makeBid(bid: Bid) {\n    try {\n      this.validateBid(bid)\n      this.bids = [...this.bids, this.convertBidToPlayerBid(bid)]\n      this.logRoundState()\n      this.currentPlayerIndex = this.getNextPlayer()\n      return true\n    } catch (error) {\n      return error\n    }\n  }\n\n  doesATrumpB(a: number, b: number) {\n    if (a === b) return 0\n    if (a === 1) return 1\n    if (a > b) return 1\n    return -1\n  }\n\n  isFaceValid(face: number) {\n    return this.validFaces.includes(face)\n  }\n\n  validateBid(bid: Bid) {\n    if (!this.isFaceValid(bid.face)) {\n      throw new Error(`That face doesn't exist in ${this.validFaces.toString()}`)\n    }\n    if (this.bids.length > 0) {\n      this.validatePotentialBidAgainstCurrent(bid, this.getCurrentBid())\n    }\n  }\n\n  validatePotentialBidAgainstCurrent(potentialBid: Bid, currentBid: Bid) {\n    if (potentialBid.quantity === currentBid.quantity) {\n      if (this.doesATrumpB(potentialBid.face, currentBid.face) <= 0) {\n        throw new Error(`If the quantity of dice is the same, the face must be higher`)\n      }\n    }\n    if (potentialBid.face === currentBid.face) {\n      if (potentialBid.quantity <= currentBid.quantity) {\n        throw new Error(\n          `If the face of the dice is the same as the last bid, the quantity must be higher`\n        )\n      }\n    }\n    if (potentialBid.face > currentBid.face && potentialBid.quantity < currentBid.quantity) {\n      throw new Error(\n        `If the face of the die is greater than the last bid, the quantity must be greater than or the same`\n      )\n    }\n  }\n  validateLiarCall() {\n    if (this.bids.length < 1) {\n      throw new Error(`You can't call 'liar' if there are no previous bids`)\n    }\n  }\n\n  callLiar() {\n    try {\n      this.validateLiarCall()\n      const currentBid = this.getCurrentBid()\n      const actualNumberOfDie = this.getNumberOfDiceWithFace(currentBid.face)\n      if (currentBid.quantity === actualNumberOfDie) {\n        this.handleSpotOn()\n      }\n      if (currentBid.quantity > actualNumberOfDie) {\n        this.handleGreaterThan()\n      }\n      if (currentBid.quantity < actualNumberOfDie) {\n        this.handleLessThan()\n      }\n      this.removeWinners()\n      if (this.isEndGame()) {\n        this.handleEndGame()\n      }\n      this.startNewRound()\n      return true\n    } catch (error) {\n      return error\n    }\n  }\n\n  handleSpotOn() {\n    this.handleLessThan()\n  }\n\n  handleLessThan() {\n    const loserId = this.getCurrentPlayer().id\n    this.players = this.removeDice(loserId)\n  }\n\n  handleGreaterThan() {\n    const loserId = this.getCurrentBid().playerId\n    this.players = this.removeDice(loserId)\n  }\n\n  private removeDice(excludedPlayerId: number): GamePlayer[] {\n    return this.players.map(player => {\n      if (player.id !== excludedPlayerId) {\n        player.hand = this.generateHand(player.hand.length - 1)\n      } else {\n        player.hand = this.generateHand(player.hand.length)\n      }\n      return player\n    })\n  }\n\n  removeWinners() {\n    this.winners = [...this.winners, ...this.players.filter(player => player.hand.length === 0)]\n    this.players = [...this.players.filter(player => player.hand.length !== 0)]\n  }\n\n  isEndGame() {\n    return this.players.length === 1\n  }\n\n  handleEndGame() {\n    this.losers = this.players\n    this.players = []\n  }\n  // TODO: make sure we are handling who the first to act is next round\n  startNewRound() {\n    this.roundHistory = [...this.roundHistory, this.bids]\n    this.bids = []\n  }\n  get round() {\n    return this.roundHistory.length\n  }\n  printGameState() {\n    console.log(this)\n  }\n}\nlet game = new Liars(1, {})\ngame.addPlayers([{ id: 1, name: 'Rob' }, { id: 2, name: 'Lela' }])\ngame.startGame()\n// console.log(game.players[0])\n// game.printGameState()\ngame.makeBid({ quantity: 2, face: 3 })\ngame.makeBid({ quantity: 2, face: 3 })\ngame.makeBid({ quantity: 10, face: 2 })\ngame.logger.printAll()\n// console.log(game.players)\n// console.log(game.players)\n// game.printGameState()\n// game.makeBid({ quantity: 2, face: 6 })\n// game.makeBid({ quantity: 1, face: 2 })\n// console.log(game.bids)\n\n// console.log('result: %j', game.getNumberOfDie(3))\n"],"names":[],"mappings":"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"}